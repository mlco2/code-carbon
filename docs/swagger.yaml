swagger: "2.0"
info:
  description: "This is a ."
  version: "0.0.0"
  title: "Code Carbon API"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "MIT"
    url: "https://github.com/mlco2/codecarbon/blob/master/LICENSE"
host: "codecarbon.io"
basePath: "/v1"
tags:
- name: "emission"
  description: "Everything about your emissions"
  externalDocs:
    description: "Find out more"
    url: "http://codecarbon.io"
- name: "company"
  description: "Access to companies"
- name: "user"
  description: "Operations about user"
schemes:
- "https"
- "http"
paths:
  /emission:
    post:
      tags:
      - "emission"
      summary: "Add a new emission"
      description: ""
      operationId: "addEmission"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Emission object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Emission"
      responses:
        "405":
          description: "Invalid input"
    put:
      tags:
      - "emission"
      summary: "Update an existing emission"
      description: ""
      operationId: "updateEmission"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Emission object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Emission"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Emission not found"
        "405":
          description: "Validation exception"
  /emission/findByStatus:
    get:
      tags:
      - "emission"
      summary: "Finds Emissions by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findEmissionsByStatus"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "available"
          - "pending"
          - "sold"
          default: "available"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Emission"
        "400":
          description: "Invalid status value"
  /emission/{emissionId}:
    get:
      tags:
      - "emission"
      summary: "Find emission by ID"
      description: "Returns a single emission"
      operationId: "getEmissionById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "emissionId"
        in: "path"
        description: "ID of emission to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Emission"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Emission not found"
      security:
      - api_key: []
    post:
      tags:
      - "emission"
      summary: "Updates a emission in the store with form data"
      description: ""
      operationId: "updateEmissionWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "emissionId"
        in: "path"
        description: "ID of emission that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Updated name of the emission"
        required: false
        type: "string"
      - name: "status"
        in: "formData"
        description: "Updated status of the emission"
        required: false
        type: "string"
      responses:
        "405":
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    delete:
      tags:
      - "emission"
      summary: "Deletes a emission"
      description: ""
      operationId: "deleteEmission"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "emissionId"
        in: "path"
        description: "Emission id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Emission not found"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithList:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Emission:
    type: "object"
    required:
    - "timestamp"
    - "experiment_id"
    - "project_name"
    - "duration"
    - "emissions"
    - "energy_consumed"
    - "country_name"
    - "country_iso_code"
    - "region"
    - "on_cloud"
    - "cloud_provider"
    - "cloud_region"
    properties:
      timestamp:
        type: "string"
        example: "20210401-22:22:22UTC"
      experiment_id:
        type: "string"
        example: "5464-5452-5461-5646"
      project_name:
        type: "string"
        example: "skynet"
      duration:
        type: "integer"
        format: "int64"
        example: "98745"
      emissions:
        type: "integer"
        format: "int64"
        example: "1.548444"
      energy_consumed:
        type: "integer"
        format: "int64"
        example: "57.21874"
      country_name:
        type: "string"
        example: "France"
      country_iso_code:
        type: "string"
        example: "FRA"
      region:
        type: "string"
        example: "france"
      on_cloud:
        type: "boolean"
      cloud_provider:
        type: "string"
        example: "aws"
      cloud_region:
        type: "string"
        example: "eu-west-1a"
    xml:
      name: "Emission"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"